/*
  Central Package Loader

  Do NOT edit this file.
  All components are declared in "components.js"

  KULeuven/LIBIS (c) 2017
  Mehmet Celik
*/
import Primo from './primo-explore-dom/js/primo'
import Helper from './primo-explore-dom/js/primo/explore/helper'
import Components from './components'
import Templates from './templates'

//make Primo public
window.Primo = Primo;
//load PrimoExplorer UI if angular.reloadWithDebugInfo() is ran
window.setTimeout(function () {
  if (Primo.isDebugEnabled()) {
    let uiURL = 'https://cdn.rawgit.com/mehmetc/primo-explore-dom-ui/fc0868df/js/custom.js';
    //let uiURL = 'http://127.0.0.1:8000/js/custom.js';

    Helper.loadScript(uiURL).then(() => {
      console.log('Injecting UI');
      Primo.explore.ui.toggle();
    });
  }
}, 2000);

let servicesHost = 'https://services.libis.be/';

// let app = angular.module('viewCustom', ['ngMaterial', 'vcRecaptcha','googleAnalytics'])
let app = angular.module('viewCustom', ['ngMaterial', 'vcRecaptcha'])
/*
  .constant('feedbackServiceURL', servicesHost + 'feedback')
  .constant('reportAProblemURL', servicesHost + 'report_a_problem')
  .constant('requestACopyURL', servicesHost + 'request_a_copy')
  .constant('requestACopyOfEsDocURL', servicesHost + 'illjwtform')
  .config(($sceDelegateProvider) => {
    $sceDelegateProvider.resourceUrlWhitelist([
      '**'
    ]);
  })
*/
/*
app.factory('regViewSearchHttpCallInterceptor', regViewSearchHttpCallInterceptor)  
//intercept api calls for database search and change to KUL (only regional views)
var reg_views = ["32KUL_HUB:LIBISNET2_UNION"];
if (reg_views.includes(window.appConfig.vid)) {
  app.config(['$httpProvider', ($httpProvider) => { $httpProvider.interceptors.push('regViewSearchHttpCallInterceptor'); }]);
}
*/

//Contains the after component selectors that will be injected
let afterComponents = {};

//Create all components and determine in which after component these need to be
//injected
console.log('Loading viewCustom components');
Components.all.forEach((component) => {
  console.log(component.name)
  if (component.enabled) {
    if (component.appendTo) {
      let elements = afterComponents[component.appendTo] || [];
      //elements.push(component.name);
      elements.push({
        'name': component.name,
        'enableInView': component.enableInView
      });
      afterComponents[component.appendTo] = elements;

    }
    app.constant('afterComponents', afterComponents);
    app.component(component.name.toCamelCase(), component.config);
  }
})
;

console.log('Replace Templates');
Templates.all.forEach((template) => {
  console.log(template.id)
  app.run(($templateCache) => {
    $templateCache.put(template.id, template.template);
  })
})

//Inject place holders into the after components
Object.keys(afterComponents).forEach((component, i) => {
  let subComponents = afterComponents[component];
/*
  console.log ( subComponents )
  console.log ( subComponents.map(m => `<${m.name} parent-ctrl="$ctrl"></${m.name}>`) )
*/
  app.component(component.toCamelCase(), {
    bindings: {
      parentCtrl: '<'
    },
    template: subComponents.map(m => `<${m.name} parent-ctrl="$ctrl"></${m.name}>`).join("")
  });
});

